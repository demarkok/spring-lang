//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/Ilya.Kaysin/Dropbox/AU/5/IDE/spring-lang/Spring/src/Spring/src/Grammar/SpringLang.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class SpringLangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		TAG=1, IF=2, THEN=3, ELIF=4, ELSE=5, FI=6, FOR=7, WHILE=8, DO=9, OD=10, 
		CASE=11, ESAC=12, REPEAT=13, UNTIL=14, LOCAL=15, OF=16, LENGTH=17, RETURN=18, 
		SKIP_KW=19, FUN=20, ASSIGN=21, OP_DISJ=22, OP_CONJ=23, OP_EQ=24, OP_CMP=25, 
		OP_ADD=26, OP_MUL=27, IDENT=28, DECIMAL=29, TIC=30, DOT=31, COMMA=32, 
		WILDCARD=33, ARROW=34, SEMI=35, BAR=36, LBRACK=37, RBRACK=38, LPAR=39, 
		RPAR=40, LCURL=41, RCURL=42, WS=43, COMMENT_1=44, COMMENT_2=45, UNKNOWN=46;
	public const int
		RULE_program = 0, RULE_funDef = 1, RULE_localVariables = 2, RULE_localVariableList = 3, 
		RULE_identifierDecl = 4, RULE_functionParameterList = 5, RULE_block = 6, 
		RULE_blockWithBraces = 7, RULE_statement = 8, RULE_stmtCall = 9, RULE_loopBlock = 10, 
		RULE_stmtFor = 11, RULE_stmtWhile = 12, RULE_stmtRepeat = 13, RULE_stmtCase = 14, 
		RULE_caseList = 15, RULE_caseListElement = 16, RULE_casePattern = 17, 
		RULE_casePatternList = 18, RULE_stmtIf = 19, RULE_elifBranch = 20, RULE_elseBranch = 21, 
		RULE_stmtAssignment = 22, RULE_arrayIndex = 23, RULE_stmtReturn = 24, 
		RULE_stmtSkip = 25, RULE_atomExpression = 26, RULE_expression = 27, RULE_functionCall = 28, 
		RULE_expressionList = 29, RULE_sExpr = 30, RULE_array = 31, RULE_arrayElementList = 32, 
		RULE_identifier = 33, RULE_number = 34;
	public static readonly string[] ruleNames = {
		"program", "funDef", "localVariables", "localVariableList", "identifierDecl", 
		"functionParameterList", "block", "blockWithBraces", "statement", "stmtCall", 
		"loopBlock", "stmtFor", "stmtWhile", "stmtRepeat", "stmtCase", "caseList", 
		"caseListElement", "casePattern", "casePatternList", "stmtIf", "elifBranch", 
		"elseBranch", "stmtAssignment", "arrayIndex", "stmtReturn", "stmtSkip", 
		"atomExpression", "expression", "functionCall", "expressionList", "sExpr", 
		"array", "arrayElementList", "identifier", "number"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'if'", "'then'", "'elif'", "'else'", "'fi'", "'for'", "'while'", 
		"'do'", "'od'", "'case'", "'esac'", "'repeat'", "'until'", "'local'", 
		"'of'", "'length'", "'return'", "'skip'", "'fun'", "':='", "'!!'", "'&&'", 
		null, null, null, null, null, null, "'`'", "'.'", "','", "'_'", "'->'", 
		"';'", "'|'", "'['", "']'", "'('", "')'", "'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TAG", "IF", "THEN", "ELIF", "ELSE", "FI", "FOR", "WHILE", "DO", 
		"OD", "CASE", "ESAC", "REPEAT", "UNTIL", "LOCAL", "OF", "LENGTH", "RETURN", 
		"SKIP_KW", "FUN", "ASSIGN", "OP_DISJ", "OP_CONJ", "OP_EQ", "OP_CMP", "OP_ADD", 
		"OP_MUL", "IDENT", "DECIMAL", "TIC", "DOT", "COMMA", "WILDCARD", "ARROW", 
		"SEMI", "BAR", "LBRACK", "RBRACK", "LPAR", "RPAR", "LCURL", "RCURL", "WS", 
		"COMMENT_1", "COMMENT_2", "UNKNOWN"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SpringLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SpringLangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SpringLangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SpringLangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(SpringLangParser.Eof, 0); }
		public FunDefContext[] funDef() {
			return GetRuleContexts<FunDefContext>();
		}
		public FunDefContext funDef(int i) {
			return GetRuleContext<FunDefContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpringLangVisitor<TResult> typedVisitor = visitor as ISpringLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			State = 80;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF:
			case FOR:
			case WHILE:
			case CASE:
			case REPEAT:
			case RETURN:
			case SKIP_KW:
			case FUN:
			case IDENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==FUN) {
					{
					{
					State = 70; funDef();
					}
					}
					State = 75;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 76; block();
				State = 77; Match(Eof);
				}
				break;
			case Eof:
				EnterOuterAlt(_localctx, 2);
				{
				State = 79; Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunDefContext : ParserRuleContext {
		public ITerminalNode FUN() { return GetToken(SpringLangParser.FUN, 0); }
		public IdentifierDeclContext identifierDecl() {
			return GetRuleContext<IdentifierDeclContext>(0);
		}
		public ITerminalNode LPAR() { return GetToken(SpringLangParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(SpringLangParser.RPAR, 0); }
		public BlockWithBracesContext blockWithBraces() {
			return GetRuleContext<BlockWithBracesContext>(0);
		}
		public FunctionParameterListContext functionParameterList() {
			return GetRuleContext<FunctionParameterListContext>(0);
		}
		public LocalVariablesContext localVariables() {
			return GetRuleContext<LocalVariablesContext>(0);
		}
		public FunDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.EnterFunDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.ExitFunDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpringLangVisitor<TResult> typedVisitor = visitor as ISpringLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunDefContext funDef() {
		FunDefContext _localctx = new FunDefContext(Context, State);
		EnterRule(_localctx, 2, RULE_funDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82; Match(FUN);
			State = 83; identifierDecl();
			State = 84; Match(LPAR);
			State = 86;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENT) {
				{
				State = 85; functionParameterList();
				}
			}

			State = 88; Match(RPAR);
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOCAL) {
				{
				State = 89; localVariables();
				}
			}

			State = 92; blockWithBraces();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariablesContext : ParserRuleContext {
		public ITerminalNode LOCAL() { return GetToken(SpringLangParser.LOCAL, 0); }
		public LocalVariableListContext localVariableList() {
			return GetRuleContext<LocalVariableListContext>(0);
		}
		public LocalVariablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariables; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.EnterLocalVariables(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.ExitLocalVariables(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpringLangVisitor<TResult> typedVisitor = visitor as ISpringLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariables(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariablesContext localVariables() {
		LocalVariablesContext _localctx = new LocalVariablesContext(Context, State);
		EnterRule(_localctx, 4, RULE_localVariables);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; Match(LOCAL);
			State = 95; localVariableList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableListContext : ParserRuleContext {
		public IdentifierDeclContext[] identifierDecl() {
			return GetRuleContexts<IdentifierDeclContext>();
		}
		public IdentifierDeclContext identifierDecl(int i) {
			return GetRuleContext<IdentifierDeclContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SpringLangParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SpringLangParser.COMMA, i);
		}
		public LocalVariableListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.EnterLocalVariableList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.ExitLocalVariableList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpringLangVisitor<TResult> typedVisitor = visitor as ISpringLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableListContext localVariableList() {
		LocalVariableListContext _localctx = new LocalVariableListContext(Context, State);
		EnterRule(_localctx, 6, RULE_localVariableList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97; identifierDecl();
			State = 102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 98; Match(COMMA);
				State = 99; identifierDecl();
				}
				}
				State = 104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierDeclContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(SpringLangParser.IDENT, 0); }
		public IdentifierDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.EnterIdentifierDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.ExitIdentifierDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpringLangVisitor<TResult> typedVisitor = visitor as ISpringLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierDeclContext identifierDecl() {
		IdentifierDeclContext _localctx = new IdentifierDeclContext(Context, State);
		EnterRule(_localctx, 8, RULE_identifierDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105; Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParameterListContext : ParserRuleContext {
		public IdentifierDeclContext[] identifierDecl() {
			return GetRuleContexts<IdentifierDeclContext>();
		}
		public IdentifierDeclContext identifierDecl(int i) {
			return GetRuleContext<IdentifierDeclContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SpringLangParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SpringLangParser.COMMA, i);
		}
		public FunctionParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.EnterFunctionParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.ExitFunctionParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpringLangVisitor<TResult> typedVisitor = visitor as ISpringLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterListContext functionParameterList() {
		FunctionParameterListContext _localctx = new FunctionParameterListContext(Context, State);
		EnterRule(_localctx, 10, RULE_functionParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107; identifierDecl();
			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 108; Match(COMMA);
				State = 109; identifierDecl();
				}
				}
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode[] SEMI() { return GetTokens(SpringLangParser.SEMI); }
		public ITerminalNode SEMI(int i) {
			return GetToken(SpringLangParser.SEMI, i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpringLangVisitor<TResult> typedVisitor = visitor as ISpringLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 12, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115; statement();
			State = 120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMI) {
				{
				{
				State = 116; Match(SEMI);
				State = 117; statement();
				}
				}
				State = 122;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockWithBracesContext : ParserRuleContext {
		public ITerminalNode LCURL() { return GetToken(SpringLangParser.LCURL, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode RCURL() { return GetToken(SpringLangParser.RCURL, 0); }
		public BlockWithBracesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockWithBraces; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.EnterBlockWithBraces(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.ExitBlockWithBraces(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpringLangVisitor<TResult> typedVisitor = visitor as ISpringLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockWithBraces(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockWithBracesContext blockWithBraces() {
		BlockWithBracesContext _localctx = new BlockWithBracesContext(Context, State);
		EnterRule(_localctx, 14, RULE_blockWithBraces);
		try {
			State = 129;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 123; Match(LCURL);
				State = 124; block();
				State = 125; Match(RCURL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 127; Match(LCURL);
				State = 128; Match(RCURL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StmtCallContext stmtCall() {
			return GetRuleContext<StmtCallContext>(0);
		}
		public StmtForContext stmtFor() {
			return GetRuleContext<StmtForContext>(0);
		}
		public StmtWhileContext stmtWhile() {
			return GetRuleContext<StmtWhileContext>(0);
		}
		public StmtRepeatContext stmtRepeat() {
			return GetRuleContext<StmtRepeatContext>(0);
		}
		public StmtCaseContext stmtCase() {
			return GetRuleContext<StmtCaseContext>(0);
		}
		public StmtIfContext stmtIf() {
			return GetRuleContext<StmtIfContext>(0);
		}
		public StmtAssignmentContext stmtAssignment() {
			return GetRuleContext<StmtAssignmentContext>(0);
		}
		public StmtReturnContext stmtReturn() {
			return GetRuleContext<StmtReturnContext>(0);
		}
		public StmtSkipContext stmtSkip() {
			return GetRuleContext<StmtSkipContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpringLangVisitor<TResult> typedVisitor = visitor as ISpringLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_statement);
		try {
			State = 140;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 131; stmtCall();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 132; stmtFor();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 133; stmtWhile();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 134; stmtRepeat();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 135; stmtCase();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 136; stmtIf();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 137; stmtAssignment();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 138; stmtReturn();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 139; stmtSkip();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtCallContext : ParserRuleContext {
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public StmtCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.EnterStmtCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.ExitStmtCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpringLangVisitor<TResult> typedVisitor = visitor as ISpringLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtCallContext stmtCall() {
		StmtCallContext _localctx = new StmtCallContext(Context, State);
		EnterRule(_localctx, 18, RULE_stmtCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142; functionCall();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopBlockContext : ParserRuleContext {
		public ITerminalNode DO() { return GetToken(SpringLangParser.DO, 0); }
		public ITerminalNode OD() { return GetToken(SpringLangParser.OD, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public LoopBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.EnterLoopBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.ExitLoopBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpringLangVisitor<TResult> typedVisitor = visitor as ISpringLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopBlockContext loopBlock() {
		LoopBlockContext _localctx = new LoopBlockContext(Context, State);
		EnterRule(_localctx, 20, RULE_loopBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; Match(DO);
			State = 146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << FOR) | (1L << WHILE) | (1L << CASE) | (1L << REPEAT) | (1L << RETURN) | (1L << SKIP_KW) | (1L << IDENT))) != 0)) {
				{
				State = 145; block();
				}
			}

			State = 148; Match(OD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtForContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(SpringLangParser.FOR, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SpringLangParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SpringLangParser.COMMA, i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LoopBlockContext loopBlock() {
			return GetRuleContext<LoopBlockContext>(0);
		}
		public StmtForContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtFor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.EnterStmtFor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.ExitStmtFor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpringLangVisitor<TResult> typedVisitor = visitor as ISpringLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtFor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtForContext stmtFor() {
		StmtForContext _localctx = new StmtForContext(Context, State);
		EnterRule(_localctx, 22, RULE_stmtFor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150; Match(FOR);
			State = 151; statement();
			State = 152; Match(COMMA);
			State = 153; expression(0);
			State = 154; Match(COMMA);
			State = 155; statement();
			State = 156; loopBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtWhileContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(SpringLangParser.WHILE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LoopBlockContext loopBlock() {
			return GetRuleContext<LoopBlockContext>(0);
		}
		public StmtWhileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtWhile; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.EnterStmtWhile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.ExitStmtWhile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpringLangVisitor<TResult> typedVisitor = visitor as ISpringLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtWhile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtWhileContext stmtWhile() {
		StmtWhileContext _localctx = new StmtWhileContext(Context, State);
		EnterRule(_localctx, 24, RULE_stmtWhile);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158; Match(WHILE);
			State = 159; expression(0);
			State = 160; loopBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtRepeatContext : ParserRuleContext {
		public ITerminalNode REPEAT() { return GetToken(SpringLangParser.REPEAT, 0); }
		public ITerminalNode UNTIL() { return GetToken(SpringLangParser.UNTIL, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StmtRepeatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtRepeat; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.EnterStmtRepeat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.ExitStmtRepeat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpringLangVisitor<TResult> typedVisitor = visitor as ISpringLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtRepeat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtRepeatContext stmtRepeat() {
		StmtRepeatContext _localctx = new StmtRepeatContext(Context, State);
		EnterRule(_localctx, 26, RULE_stmtRepeat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; Match(REPEAT);
			State = 164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << FOR) | (1L << WHILE) | (1L << CASE) | (1L << REPEAT) | (1L << RETURN) | (1L << SKIP_KW) | (1L << IDENT))) != 0)) {
				{
				State = 163; block();
				}
			}

			State = 166; Match(UNTIL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtCaseContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(SpringLangParser.CASE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode OF() { return GetToken(SpringLangParser.OF, 0); }
		public CaseListContext caseList() {
			return GetRuleContext<CaseListContext>(0);
		}
		public ITerminalNode ESAC() { return GetToken(SpringLangParser.ESAC, 0); }
		public StmtCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtCase; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.EnterStmtCase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.ExitStmtCase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpringLangVisitor<TResult> typedVisitor = visitor as ISpringLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtCaseContext stmtCase() {
		StmtCaseContext _localctx = new StmtCaseContext(Context, State);
		EnterRule(_localctx, 28, RULE_stmtCase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168; Match(CASE);
			State = 169; expression(0);
			State = 170; Match(OF);
			State = 171; caseList();
			State = 172; Match(ESAC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseListContext : ParserRuleContext {
		public CaseListElementContext[] caseListElement() {
			return GetRuleContexts<CaseListElementContext>();
		}
		public CaseListElementContext caseListElement(int i) {
			return GetRuleContext<CaseListElementContext>(i);
		}
		public ITerminalNode[] BAR() { return GetTokens(SpringLangParser.BAR); }
		public ITerminalNode BAR(int i) {
			return GetToken(SpringLangParser.BAR, i);
		}
		public CaseListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.EnterCaseList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.ExitCaseList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpringLangVisitor<TResult> typedVisitor = visitor as ISpringLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseListContext caseList() {
		CaseListContext _localctx = new CaseListContext(Context, State);
		EnterRule(_localctx, 30, RULE_caseList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174; caseListElement();
			State = 179;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BAR) {
				{
				{
				State = 175; Match(BAR);
				State = 176; caseListElement();
				}
				}
				State = 181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseListElementContext : ParserRuleContext {
		public CasePatternContext casePattern() {
			return GetRuleContext<CasePatternContext>(0);
		}
		public ITerminalNode ARROW() { return GetToken(SpringLangParser.ARROW, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CaseListElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseListElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.EnterCaseListElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.ExitCaseListElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpringLangVisitor<TResult> typedVisitor = visitor as ISpringLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseListElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseListElementContext caseListElement() {
		CaseListElementContext _localctx = new CaseListElementContext(Context, State);
		EnterRule(_localctx, 32, RULE_caseListElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182; casePattern();
			State = 183; Match(ARROW);
			State = 184; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CasePatternContext : ParserRuleContext {
		public ITerminalNode WILDCARD() { return GetToken(SpringLangParser.WILDCARD, 0); }
		public IdentifierDeclContext identifierDecl() {
			return GetRuleContext<IdentifierDeclContext>(0);
		}
		public ITerminalNode TAG() { return GetToken(SpringLangParser.TAG, 0); }
		public ITerminalNode LPAR() { return GetToken(SpringLangParser.LPAR, 0); }
		public CasePatternListContext casePatternList() {
			return GetRuleContext<CasePatternListContext>(0);
		}
		public ITerminalNode RPAR() { return GetToken(SpringLangParser.RPAR, 0); }
		public CasePatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_casePattern; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.EnterCasePattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.ExitCasePattern(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpringLangVisitor<TResult> typedVisitor = visitor as ISpringLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCasePattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CasePatternContext casePattern() {
		CasePatternContext _localctx = new CasePatternContext(Context, State);
		EnterRule(_localctx, 34, RULE_casePattern);
		int _la;
		try {
			State = 195;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WILDCARD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 186; Match(WILDCARD);
				}
				break;
			case IDENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 187; identifierDecl();
				}
				break;
			case TAG:
				EnterOuterAlt(_localctx, 3);
				{
				State = 188; Match(TAG);
				State = 193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAR) {
					{
					State = 189; Match(LPAR);
					State = 190; casePatternList();
					State = 191; Match(RPAR);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CasePatternListContext : ParserRuleContext {
		public CasePatternContext[] casePattern() {
			return GetRuleContexts<CasePatternContext>();
		}
		public CasePatternContext casePattern(int i) {
			return GetRuleContext<CasePatternContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SpringLangParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SpringLangParser.COMMA, i);
		}
		public CasePatternListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_casePatternList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.EnterCasePatternList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.ExitCasePatternList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpringLangVisitor<TResult> typedVisitor = visitor as ISpringLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCasePatternList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CasePatternListContext casePatternList() {
		CasePatternListContext _localctx = new CasePatternListContext(Context, State);
		EnterRule(_localctx, 36, RULE_casePatternList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197; casePattern();
			State = 202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 198; Match(COMMA);
				State = 199; casePattern();
				}
				}
				State = 204;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtIfContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(SpringLangParser.IF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(SpringLangParser.THEN, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode FI() { return GetToken(SpringLangParser.FI, 0); }
		public ElifBranchContext[] elifBranch() {
			return GetRuleContexts<ElifBranchContext>();
		}
		public ElifBranchContext elifBranch(int i) {
			return GetRuleContext<ElifBranchContext>(i);
		}
		public ElseBranchContext elseBranch() {
			return GetRuleContext<ElseBranchContext>(0);
		}
		public StmtIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtIf; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.EnterStmtIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.ExitStmtIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpringLangVisitor<TResult> typedVisitor = visitor as ISpringLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtIfContext stmtIf() {
		StmtIfContext _localctx = new StmtIfContext(Context, State);
		EnterRule(_localctx, 38, RULE_stmtIf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205; Match(IF);
			State = 206; expression(0);
			State = 207; Match(THEN);
			State = 208; block();
			State = 212;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELIF) {
				{
				{
				State = 209; elifBranch();
				}
				}
				State = 214;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 215; elseBranch();
				}
			}

			State = 218; Match(FI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElifBranchContext : ParserRuleContext {
		public ITerminalNode ELIF() { return GetToken(SpringLangParser.ELIF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(SpringLangParser.THEN, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElifBranchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elifBranch; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.EnterElifBranch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.ExitElifBranch(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpringLangVisitor<TResult> typedVisitor = visitor as ISpringLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElifBranch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElifBranchContext elifBranch() {
		ElifBranchContext _localctx = new ElifBranchContext(Context, State);
		EnterRule(_localctx, 40, RULE_elifBranch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220; Match(ELIF);
			State = 221; expression(0);
			State = 222; Match(THEN);
			State = 223; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseBranchContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(SpringLangParser.ELSE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseBranchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseBranch; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.EnterElseBranch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.ExitElseBranch(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpringLangVisitor<TResult> typedVisitor = visitor as ISpringLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseBranch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseBranchContext elseBranch() {
		ElseBranchContext _localctx = new ElseBranchContext(Context, State);
		EnterRule(_localctx, 42, RULE_elseBranch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225; Match(ELSE);
			State = 226; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtAssignmentContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(SpringLangParser.ASSIGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayIndexContext arrayIndex() {
			return GetRuleContext<ArrayIndexContext>(0);
		}
		public StmtAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtAssignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.EnterStmtAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.ExitStmtAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpringLangVisitor<TResult> typedVisitor = visitor as ISpringLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtAssignmentContext stmtAssignment() {
		StmtAssignmentContext _localctx = new StmtAssignmentContext(Context, State);
		EnterRule(_localctx, 44, RULE_stmtAssignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228; identifier();
			State = 230;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACK) {
				{
				State = 229; arrayIndex();
				}
			}

			State = 232; Match(ASSIGN);
			State = 233; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayIndexContext : ParserRuleContext {
		public ITerminalNode[] LBRACK() { return GetTokens(SpringLangParser.LBRACK); }
		public ITerminalNode LBRACK(int i) {
			return GetToken(SpringLangParser.LBRACK, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] RBRACK() { return GetTokens(SpringLangParser.RBRACK); }
		public ITerminalNode RBRACK(int i) {
			return GetToken(SpringLangParser.RBRACK, i);
		}
		public ArrayIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayIndex; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.EnterArrayIndex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.ExitArrayIndex(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpringLangVisitor<TResult> typedVisitor = visitor as ISpringLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayIndexContext arrayIndex() {
		ArrayIndexContext _localctx = new ArrayIndexContext(Context, State);
		EnterRule(_localctx, 46, RULE_arrayIndex);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 235; Match(LBRACK);
					State = 236; expression(0);
					State = 237; Match(RBRACK);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 241;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtReturnContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(SpringLangParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StmtReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtReturn; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.EnterStmtReturn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.ExitStmtReturn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpringLangVisitor<TResult> typedVisitor = visitor as ISpringLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtReturnContext stmtReturn() {
		StmtReturnContext _localctx = new StmtReturnContext(Context, State);
		EnterRule(_localctx, 48, RULE_stmtReturn);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243; Match(RETURN);
			State = 245;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TAG) | (1L << OP_ADD) | (1L << IDENT) | (1L << DECIMAL) | (1L << LBRACK) | (1L << LPAR))) != 0)) {
				{
				State = 244; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtSkipContext : ParserRuleContext {
		public ITerminalNode SKIP_KW() { return GetToken(SpringLangParser.SKIP_KW, 0); }
		public StmtSkipContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtSkip; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.EnterStmtSkip(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.ExitStmtSkip(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpringLangVisitor<TResult> typedVisitor = visitor as ISpringLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtSkip(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtSkipContext stmtSkip() {
		StmtSkipContext _localctx = new StmtSkipContext(Context, State);
		EnterRule(_localctx, 50, RULE_stmtSkip);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247; Match(SKIP_KW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomExpressionContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public SExprContext sExpr() {
			return GetRuleContext<SExprContext>(0);
		}
		public AtomExpressionContext atomExpression() {
			return GetRuleContext<AtomExpressionContext>(0);
		}
		public ArrayIndexContext arrayIndex() {
			return GetRuleContext<ArrayIndexContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(SpringLangParser.DOT, 0); }
		public ITerminalNode LENGTH() { return GetToken(SpringLangParser.LENGTH, 0); }
		public AtomExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.EnterAtomExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.ExitAtomExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpringLangVisitor<TResult> typedVisitor = visitor as ISpringLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomExpressionContext atomExpression() {
		return atomExpression(0);
	}

	private AtomExpressionContext atomExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AtomExpressionContext _localctx = new AtomExpressionContext(Context, _parentState);
		AtomExpressionContext _prevctx = _localctx;
		int _startState = 52;
		EnterRecursionRule(_localctx, 52, RULE_atomExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 250; identifier();
				}
				break;
			case 2:
				{
				State = 251; functionCall();
				}
				break;
			case 3:
				{
				State = 252; array();
				}
				break;
			case 4:
				{
				State = 253; number();
				}
				break;
			case 5:
				{
				State = 254; sExpr();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 264;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 262;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
					case 1:
						{
						_localctx = new AtomExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_atomExpression);
						State = 257;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 258; arrayIndex();
						}
						break;
					case 2:
						{
						_localctx = new AtomExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_atomExpression);
						State = 259;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 260; Match(DOT);
						State = 261; Match(LENGTH);
						}
						break;
					}
					} 
				}
				State = 266;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ITerminalNode LPAR() { return GetToken(SpringLangParser.LPAR, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RPAR() { return GetToken(SpringLangParser.RPAR, 0); }
		public AtomExpressionContext atomExpression() {
			return GetRuleContext<AtomExpressionContext>(0);
		}
		public ITerminalNode OP_ADD() { return GetToken(SpringLangParser.OP_ADD, 0); }
		public ITerminalNode OP_MUL() { return GetToken(SpringLangParser.OP_MUL, 0); }
		public ITerminalNode OP_CMP() { return GetToken(SpringLangParser.OP_CMP, 0); }
		public ITerminalNode OP_EQ() { return GetToken(SpringLangParser.OP_EQ, 0); }
		public ITerminalNode OP_CONJ() { return GetToken(SpringLangParser.OP_CONJ, 0); }
		public ITerminalNode OP_DISJ() { return GetToken(SpringLangParser.OP_DISJ, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpringLangVisitor<TResult> typedVisitor = visitor as ISpringLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 54;
		EnterRecursionRule(_localctx, 54, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAR:
				{
				State = 268; Match(LPAR);
				State = 269; expression(0);
				State = 270; Match(RPAR);
				}
				break;
			case TAG:
			case OP_ADD:
			case IDENT:
			case DECIMAL:
			case LBRACK:
				{
				State = 273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OP_ADD) {
					{
					State = 272; Match(OP_ADD);
					}
				}

				State = 275; atomExpression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 298;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 296;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 278;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 279; Match(OP_MUL);
						State = 280; expression(9);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 281;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 282; Match(OP_ADD);
						State = 283; expression(8);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 284;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 285; Match(OP_CMP);
						State = 286; expression(7);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 287;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 288; Match(OP_EQ);
						State = 289; expression(6);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 290;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 291; Match(OP_CONJ);
						State = 292; expression(5);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 293;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 294; Match(OP_DISJ);
						State = 295; expression(4);
						}
						break;
					}
					} 
				}
				State = 300;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode LPAR() { return GetToken(SpringLangParser.LPAR, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ITerminalNode RPAR() { return GetToken(SpringLangParser.RPAR, 0); }
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpringLangVisitor<TResult> typedVisitor = visitor as ISpringLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 56, RULE_functionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301; identifier();
			State = 302; Match(LPAR);
			State = 303; expressionList();
			State = 304; Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SpringLangParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SpringLangParser.COMMA, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpringLangVisitor<TResult> typedVisitor = visitor as ISpringLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 58, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306; expression(0);
			State = 311;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 307; Match(COMMA);
				State = 308; expression(0);
				}
				}
				State = 313;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SExprContext : ParserRuleContext {
		public ITerminalNode TAG() { return GetToken(SpringLangParser.TAG, 0); }
		public ITerminalNode LPAR() { return GetToken(SpringLangParser.LPAR, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ITerminalNode RPAR() { return GetToken(SpringLangParser.RPAR, 0); }
		public SExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.EnterSExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.ExitSExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpringLangVisitor<TResult> typedVisitor = visitor as ISpringLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SExprContext sExpr() {
		SExprContext _localctx = new SExprContext(Context, State);
		EnterRule(_localctx, 60, RULE_sExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314; Match(TAG);
			State = 319;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 315; Match(LPAR);
				State = 316; expressionList();
				State = 317; Match(RPAR);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ITerminalNode LBRACK() { return GetToken(SpringLangParser.LBRACK, 0); }
		public ArrayElementListContext arrayElementList() {
			return GetRuleContext<ArrayElementListContext>(0);
		}
		public ITerminalNode RBRACK() { return GetToken(SpringLangParser.RBRACK, 0); }
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpringLangVisitor<TResult> typedVisitor = visitor as ISpringLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 62, RULE_array);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321; Match(LBRACK);
			State = 322; arrayElementList();
			State = 323; Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayElementListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SpringLangParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SpringLangParser.COMMA, i);
		}
		public ArrayElementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayElementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.EnterArrayElementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.ExitArrayElementList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpringLangVisitor<TResult> typedVisitor = visitor as ISpringLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayElementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayElementListContext arrayElementList() {
		ArrayElementListContext _localctx = new ArrayElementListContext(Context, State);
		EnterRule(_localctx, 64, RULE_arrayElementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325; expression(0);
			State = 330;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 326; Match(COMMA);
				State = 327; expression(0);
				}
				}
				State = 332;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(SpringLangParser.IDENT, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpringLangVisitor<TResult> typedVisitor = visitor as ISpringLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 66, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333; Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode DECIMAL() { return GetToken(SpringLangParser.DECIMAL, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpringLangListener typedListener = listener as ISpringLangListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISpringLangVisitor<TResult> typedVisitor = visitor as ISpringLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 68, RULE_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335; Match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 26: return atomExpression_sempred((AtomExpressionContext)_localctx, predIndex);
		case 27: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool atomExpression_sempred(AtomExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 8);
		case 3: return Precpred(Context, 7);
		case 4: return Precpred(Context, 6);
		case 5: return Precpred(Context, 5);
		case 6: return Precpred(Context, 4);
		case 7: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x30', '\x154', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x3', '\x2', '\a', '\x2', 'J', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', 'M', '\v', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', 'S', '\n', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'Y', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', ']', '\n', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', 'g', '\n', 
		'\x5', '\f', '\x5', '\xE', '\x5', 'j', '\v', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 'q', '\n', '\a', 
		'\f', '\a', '\xE', '\a', 't', '\v', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\a', '\b', 'y', '\n', '\b', '\f', '\b', '\xE', '\b', '|', '\v', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x5', '\t', '\x84', '\n', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x5', '\n', '\x8F', '\n', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x95', '\n', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x5', 
		'\xF', '\xA7', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\xB4', '\n', 
		'\x11', '\f', '\x11', '\xE', '\x11', '\xB7', '\v', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x5', '\x13', '\xC4', '\n', '\x13', '\x5', '\x13', '\xC6', '\n', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', '\xCB', '\n', 
		'\x14', '\f', '\x14', '\xE', '\x14', '\xCE', '\v', '\x14', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\a', '\x15', 
		'\xD5', '\n', '\x15', '\f', '\x15', '\xE', '\x15', '\xD8', '\v', '\x15', 
		'\x3', '\x15', '\x5', '\x15', '\xDB', '\n', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', 
		'\x18', '\x5', '\x18', '\xE9', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x6', '\x19', '\xF2', '\n', '\x19', '\r', '\x19', '\xE', '\x19', '\xF3', 
		'\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\xF8', '\n', '\x1A', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x102', '\n', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\a', '\x1C', '\x109', '\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', '\x10C', 
		'\v', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x114', '\n', '\x1D', '\x3', 
		'\x1D', '\x5', '\x1D', '\x117', '\n', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\a', '\x1D', '\x12B', '\n', '\x1D', '\f', '\x1D', '\xE', 
		'\x1D', '\x12E', '\v', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\a', '\x1F', '\x138', '\n', '\x1F', '\f', '\x1F', '\xE', '\x1F', '\x13B', 
		'\v', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x5', ' ', '\x142', '\n', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\a', '\"', '\x14B', '\n', 
		'\"', '\f', '\"', '\xE', '\"', '\x14E', '\v', '\"', '\x3', '#', '\x3', 
		'#', '\x3', '$', '\x3', '$', '\x3', '$', '\x2', '\x4', '\x36', '\x38', 
		'%', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', 
		'\x42', '\x44', '\x46', '\x2', '\x2', '\x2', '\x15D', '\x2', 'R', '\x3', 
		'\x2', '\x2', '\x2', '\x4', 'T', '\x3', '\x2', '\x2', '\x2', '\x6', '`', 
		'\x3', '\x2', '\x2', '\x2', '\b', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'\n', 'k', '\x3', '\x2', '\x2', '\x2', '\f', 'm', '\x3', '\x2', '\x2', 
		'\x2', '\xE', 'u', '\x3', '\x2', '\x2', '\x2', '\x10', '\x83', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x90', '\x3', '\x2', '\x2', '\x2', '\x16', '\x92', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\x98', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xA0', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\xA4', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\xAA', '\x3', '\x2', '\x2', '\x2', ' ', '\xB0', '\x3', '\x2', '\x2', 
		'\x2', '\"', '\xB8', '\x3', '\x2', '\x2', '\x2', '$', '\xC5', '\x3', '\x2', 
		'\x2', '\x2', '&', '\xC7', '\x3', '\x2', '\x2', '\x2', '(', '\xCF', '\x3', 
		'\x2', '\x2', '\x2', '*', '\xDE', '\x3', '\x2', '\x2', '\x2', ',', '\xE3', 
		'\x3', '\x2', '\x2', '\x2', '.', '\xE6', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\xF1', '\x3', '\x2', '\x2', '\x2', '\x32', '\xF5', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\xF9', '\x3', '\x2', '\x2', '\x2', '\x36', '\x101', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\x116', '\x3', '\x2', '\x2', '\x2', ':', 
		'\x12F', '\x3', '\x2', '\x2', '\x2', '<', '\x134', '\x3', '\x2', '\x2', 
		'\x2', '>', '\x13C', '\x3', '\x2', '\x2', '\x2', '@', '\x143', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '\x147', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x14F', '\x3', '\x2', '\x2', '\x2', '\x46', '\x151', '\x3', '\x2', '\x2', 
		'\x2', 'H', 'J', '\x5', '\x4', '\x3', '\x2', 'I', 'H', '\x3', '\x2', '\x2', 
		'\x2', 'J', 'M', '\x3', '\x2', '\x2', '\x2', 'K', 'I', '\x3', '\x2', '\x2', 
		'\x2', 'K', 'L', '\x3', '\x2', '\x2', '\x2', 'L', 'N', '\x3', '\x2', '\x2', 
		'\x2', 'M', 'K', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\x5', '\xE', '\b', 
		'\x2', 'O', 'P', '\a', '\x2', '\x2', '\x3', 'P', 'S', '\x3', '\x2', '\x2', 
		'\x2', 'Q', 'S', '\a', '\x2', '\x2', '\x3', 'R', 'K', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'Q', '\x3', '\x2', '\x2', '\x2', 'S', '\x3', '\x3', '\x2', 
		'\x2', '\x2', 'T', 'U', '\a', '\x16', '\x2', '\x2', 'U', 'V', '\x5', '\n', 
		'\x6', '\x2', 'V', 'X', '\a', ')', '\x2', '\x2', 'W', 'Y', '\x5', '\f', 
		'\a', '\x2', 'X', 'W', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\x3', '\x2', 
		'\x2', '\x2', 'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 'Z', '\\', '\a', '*', 
		'\x2', '\x2', '[', ']', '\x5', '\x6', '\x4', '\x2', '\\', '[', '\x3', 
		'\x2', '\x2', '\x2', '\\', ']', '\x3', '\x2', '\x2', '\x2', ']', '^', 
		'\x3', '\x2', '\x2', '\x2', '^', '_', '\x5', '\x10', '\t', '\x2', '_', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '`', '\x61', '\a', '\x11', '\x2', '\x2', 
		'\x61', '\x62', '\x5', '\b', '\x5', '\x2', '\x62', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\x63', 'h', '\x5', '\n', '\x6', '\x2', '\x64', '\x65', 
		'\a', '\"', '\x2', '\x2', '\x65', 'g', '\x5', '\n', '\x6', '\x2', '\x66', 
		'\x64', '\x3', '\x2', '\x2', '\x2', 'g', 'j', '\x3', '\x2', '\x2', '\x2', 
		'h', '\x66', '\x3', '\x2', '\x2', '\x2', 'h', 'i', '\x3', '\x2', '\x2', 
		'\x2', 'i', '\t', '\x3', '\x2', '\x2', '\x2', 'j', 'h', '\x3', '\x2', 
		'\x2', '\x2', 'k', 'l', '\a', '\x1E', '\x2', '\x2', 'l', '\v', '\x3', 
		'\x2', '\x2', '\x2', 'm', 'r', '\x5', '\n', '\x6', '\x2', 'n', 'o', '\a', 
		'\"', '\x2', '\x2', 'o', 'q', '\x5', '\n', '\x6', '\x2', 'p', 'n', '\x3', 
		'\x2', '\x2', '\x2', 'q', 't', '\x3', '\x2', '\x2', '\x2', 'r', 'p', '\x3', 
		'\x2', '\x2', '\x2', 'r', 's', '\x3', '\x2', '\x2', '\x2', 's', '\r', 
		'\x3', '\x2', '\x2', '\x2', 't', 'r', '\x3', '\x2', '\x2', '\x2', 'u', 
		'z', '\x5', '\x12', '\n', '\x2', 'v', 'w', '\a', '%', '\x2', '\x2', 'w', 
		'y', '\x5', '\x12', '\n', '\x2', 'x', 'v', '\x3', '\x2', '\x2', '\x2', 
		'y', '|', '\x3', '\x2', '\x2', '\x2', 'z', 'x', '\x3', '\x2', '\x2', '\x2', 
		'z', '{', '\x3', '\x2', '\x2', '\x2', '{', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '|', 'z', '\x3', '\x2', '\x2', '\x2', '}', '~', '\a', '+', '\x2', 
		'\x2', '~', '\x7F', '\x5', '\xE', '\b', '\x2', '\x7F', '\x80', '\a', ',', 
		'\x2', '\x2', '\x80', '\x84', '\x3', '\x2', '\x2', '\x2', '\x81', '\x82', 
		'\a', '+', '\x2', '\x2', '\x82', '\x84', '\a', ',', '\x2', '\x2', '\x83', 
		'}', '\x3', '\x2', '\x2', '\x2', '\x83', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\x84', '\x11', '\x3', '\x2', '\x2', '\x2', '\x85', '\x8F', '\x5', 
		'\x14', '\v', '\x2', '\x86', '\x8F', '\x5', '\x18', '\r', '\x2', '\x87', 
		'\x8F', '\x5', '\x1A', '\xE', '\x2', '\x88', '\x8F', '\x5', '\x1C', '\xF', 
		'\x2', '\x89', '\x8F', '\x5', '\x1E', '\x10', '\x2', '\x8A', '\x8F', '\x5', 
		'(', '\x15', '\x2', '\x8B', '\x8F', '\x5', '.', '\x18', '\x2', '\x8C', 
		'\x8F', '\x5', '\x32', '\x1A', '\x2', '\x8D', '\x8F', '\x5', '\x34', '\x1B', 
		'\x2', '\x8E', '\x85', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '\x8E', '\x87', '\x3', '\x2', '\x2', '\x2', '\x8E', 
		'\x88', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x89', '\x3', '\x2', '\x2', 
		'\x2', '\x8E', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8B', '\x3', 
		'\x2', '\x2', '\x2', '\x8E', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8E', 
		'\x8D', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x90', '\x91', '\x5', ':', '\x1E', '\x2', '\x91', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x92', '\x94', '\a', '\v', '\x2', '\x2', '\x93', 
		'\x95', '\x5', '\xE', '\b', '\x2', '\x94', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\x94', '\x95', '\x3', '\x2', '\x2', '\x2', '\x95', '\x96', '\x3', 
		'\x2', '\x2', '\x2', '\x96', '\x97', '\a', '\f', '\x2', '\x2', '\x97', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\a', '\t', '\x2', 
		'\x2', '\x99', '\x9A', '\x5', '\x12', '\n', '\x2', '\x9A', '\x9B', '\a', 
		'\"', '\x2', '\x2', '\x9B', '\x9C', '\x5', '\x38', '\x1D', '\x2', '\x9C', 
		'\x9D', '\a', '\"', '\x2', '\x2', '\x9D', '\x9E', '\x5', '\x12', '\n', 
		'\x2', '\x9E', '\x9F', '\x5', '\x16', '\f', '\x2', '\x9F', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\xA0', '\xA1', '\a', '\n', '\x2', '\x2', '\xA1', 
		'\xA2', '\x5', '\x38', '\x1D', '\x2', '\xA2', '\xA3', '\x5', '\x16', '\f', 
		'\x2', '\xA3', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA6', '\a', 
		'\xF', '\x2', '\x2', '\xA5', '\xA7', '\x5', '\xE', '\b', '\x2', '\xA6', 
		'\xA5', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', '\x3', '\x2', '\x2', 
		'\x2', '\xA7', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA9', '\a', 
		'\x10', '\x2', '\x2', '\xA9', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xAA', 
		'\xAB', '\a', '\r', '\x2', '\x2', '\xAB', '\xAC', '\x5', '\x38', '\x1D', 
		'\x2', '\xAC', '\xAD', '\a', '\x12', '\x2', '\x2', '\xAD', '\xAE', '\x5', 
		' ', '\x11', '\x2', '\xAE', '\xAF', '\a', '\xE', '\x2', '\x2', '\xAF', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB5', '\x5', '\"', '\x12', 
		'\x2', '\xB1', '\xB2', '\a', '&', '\x2', '\x2', '\xB2', '\xB4', '\x5', 
		'\"', '\x12', '\x2', '\xB3', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB4', 
		'\xB7', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB3', '\x3', '\x2', '\x2', 
		'\x2', '\xB5', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB6', '!', '\x3', 
		'\x2', '\x2', '\x2', '\xB7', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB8', 
		'\xB9', '\x5', '$', '\x13', '\x2', '\xB9', '\xBA', '\a', '$', '\x2', '\x2', 
		'\xBA', '\xBB', '\x5', '\xE', '\b', '\x2', '\xBB', '#', '\x3', '\x2', 
		'\x2', '\x2', '\xBC', '\xC6', '\a', '#', '\x2', '\x2', '\xBD', '\xC6', 
		'\x5', '\n', '\x6', '\x2', '\xBE', '\xC3', '\a', '\x3', '\x2', '\x2', 
		'\xBF', '\xC0', '\a', ')', '\x2', '\x2', '\xC0', '\xC1', '\x5', '&', '\x14', 
		'\x2', '\xC1', '\xC2', '\a', '*', '\x2', '\x2', '\xC2', '\xC4', '\x3', 
		'\x2', '\x2', '\x2', '\xC3', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xC3', 
		'\xC4', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC6', '\x3', '\x2', '\x2', 
		'\x2', '\xC5', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xBD', '\x3', 
		'\x2', '\x2', '\x2', '\xC5', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xC6', 
		'%', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xCC', '\x5', '$', '\x13', '\x2', 
		'\xC8', '\xC9', '\a', '\"', '\x2', '\x2', '\xC9', '\xCB', '\x5', '$', 
		'\x13', '\x2', '\xCA', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCE', 
		'\x3', '\x2', '\x2', '\x2', '\xCC', '\xCA', '\x3', '\x2', '\x2', '\x2', 
		'\xCC', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCD', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\xCE', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xD0', 
		'\a', '\x4', '\x2', '\x2', '\xD0', '\xD1', '\x5', '\x38', '\x1D', '\x2', 
		'\xD1', '\xD2', '\a', '\x5', '\x2', '\x2', '\xD2', '\xD6', '\x5', '\xE', 
		'\b', '\x2', '\xD3', '\xD5', '\x5', '*', '\x16', '\x2', '\xD4', '\xD3', 
		'\x3', '\x2', '\x2', '\x2', '\xD5', '\xD8', '\x3', '\x2', '\x2', '\x2', 
		'\xD6', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD7', '\x3', '\x2', 
		'\x2', '\x2', '\xD7', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD6', 
		'\x3', '\x2', '\x2', '\x2', '\xD9', '\xDB', '\x5', ',', '\x17', '\x2', 
		'\xDA', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xDB', '\x3', '\x2', 
		'\x2', '\x2', '\xDB', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDD', 
		'\a', '\b', '\x2', '\x2', '\xDD', ')', '\x3', '\x2', '\x2', '\x2', '\xDE', 
		'\xDF', '\a', '\x6', '\x2', '\x2', '\xDF', '\xE0', '\x5', '\x38', '\x1D', 
		'\x2', '\xE0', '\xE1', '\a', '\x5', '\x2', '\x2', '\xE1', '\xE2', '\x5', 
		'\xE', '\b', '\x2', '\xE2', '+', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', 
		'\a', '\a', '\x2', '\x2', '\xE4', '\xE5', '\x5', '\xE', '\b', '\x2', '\xE5', 
		'-', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE8', '\x5', '\x44', '#', '\x2', 
		'\xE7', '\xE9', '\x5', '\x30', '\x19', '\x2', '\xE8', '\xE7', '\x3', '\x2', 
		'\x2', '\x2', '\xE8', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEA', 
		'\x3', '\x2', '\x2', '\x2', '\xEA', '\xEB', '\a', '\x17', '\x2', '\x2', 
		'\xEB', '\xEC', '\x5', '\x38', '\x1D', '\x2', '\xEC', '/', '\x3', '\x2', 
		'\x2', '\x2', '\xED', '\xEE', '\a', '\'', '\x2', '\x2', '\xEE', '\xEF', 
		'\x5', '\x38', '\x1D', '\x2', '\xEF', '\xF0', '\a', '(', '\x2', '\x2', 
		'\xF0', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xED', '\x3', '\x2', 
		'\x2', '\x2', '\xF2', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF1', 
		'\x3', '\x2', '\x2', '\x2', '\xF3', '\xF4', '\x3', '\x2', '\x2', '\x2', 
		'\xF4', '\x31', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF7', '\a', '\x14', 
		'\x2', '\x2', '\xF6', '\xF8', '\x5', '\x38', '\x1D', '\x2', '\xF7', '\xF6', 
		'\x3', '\x2', '\x2', '\x2', '\xF7', '\xF8', '\x3', '\x2', '\x2', '\x2', 
		'\xF8', '\x33', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFA', '\a', '\x15', 
		'\x2', '\x2', '\xFA', '\x35', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFC', 
		'\b', '\x1C', '\x1', '\x2', '\xFC', '\x102', '\x5', '\x44', '#', '\x2', 
		'\xFD', '\x102', '\x5', ':', '\x1E', '\x2', '\xFE', '\x102', '\x5', '@', 
		'!', '\x2', '\xFF', '\x102', '\x5', '\x46', '$', '\x2', '\x100', '\x102', 
		'\x5', '>', ' ', '\x2', '\x101', '\xFB', '\x3', '\x2', '\x2', '\x2', '\x101', 
		'\xFD', '\x3', '\x2', '\x2', '\x2', '\x101', '\xFE', '\x3', '\x2', '\x2', 
		'\x2', '\x101', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x101', '\x100', 
		'\x3', '\x2', '\x2', '\x2', '\x102', '\x10A', '\x3', '\x2', '\x2', '\x2', 
		'\x103', '\x104', '\f', '\x4', '\x2', '\x2', '\x104', '\x109', '\x5', 
		'\x30', '\x19', '\x2', '\x105', '\x106', '\f', '\x3', '\x2', '\x2', '\x106', 
		'\x107', '\a', '!', '\x2', '\x2', '\x107', '\x109', '\a', '\x13', '\x2', 
		'\x2', '\x108', '\x103', '\x3', '\x2', '\x2', '\x2', '\x108', '\x105', 
		'\x3', '\x2', '\x2', '\x2', '\x109', '\x10C', '\x3', '\x2', '\x2', '\x2', 
		'\x10A', '\x108', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x10B', '\x3', 
		'\x2', '\x2', '\x2', '\x10B', '\x37', '\x3', '\x2', '\x2', '\x2', '\x10C', 
		'\x10A', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10E', '\b', '\x1D', '\x1', 
		'\x2', '\x10E', '\x10F', '\a', ')', '\x2', '\x2', '\x10F', '\x110', '\x5', 
		'\x38', '\x1D', '\x2', '\x110', '\x111', '\a', '*', '\x2', '\x2', '\x111', 
		'\x117', '\x3', '\x2', '\x2', '\x2', '\x112', '\x114', '\a', '\x1C', '\x2', 
		'\x2', '\x113', '\x112', '\x3', '\x2', '\x2', '\x2', '\x113', '\x114', 
		'\x3', '\x2', '\x2', '\x2', '\x114', '\x115', '\x3', '\x2', '\x2', '\x2', 
		'\x115', '\x117', '\x5', '\x36', '\x1C', '\x2', '\x116', '\x10D', '\x3', 
		'\x2', '\x2', '\x2', '\x116', '\x113', '\x3', '\x2', '\x2', '\x2', '\x117', 
		'\x12C', '\x3', '\x2', '\x2', '\x2', '\x118', '\x119', '\f', '\n', '\x2', 
		'\x2', '\x119', '\x11A', '\a', '\x1D', '\x2', '\x2', '\x11A', '\x12B', 
		'\x5', '\x38', '\x1D', '\v', '\x11B', '\x11C', '\f', '\t', '\x2', '\x2', 
		'\x11C', '\x11D', '\a', '\x1C', '\x2', '\x2', '\x11D', '\x12B', '\x5', 
		'\x38', '\x1D', '\n', '\x11E', '\x11F', '\f', '\b', '\x2', '\x2', '\x11F', 
		'\x120', '\a', '\x1B', '\x2', '\x2', '\x120', '\x12B', '\x5', '\x38', 
		'\x1D', '\t', '\x121', '\x122', '\f', '\a', '\x2', '\x2', '\x122', '\x123', 
		'\a', '\x1A', '\x2', '\x2', '\x123', '\x12B', '\x5', '\x38', '\x1D', '\b', 
		'\x124', '\x125', '\f', '\x6', '\x2', '\x2', '\x125', '\x126', '\a', '\x19', 
		'\x2', '\x2', '\x126', '\x12B', '\x5', '\x38', '\x1D', '\a', '\x127', 
		'\x128', '\f', '\x5', '\x2', '\x2', '\x128', '\x129', '\a', '\x18', '\x2', 
		'\x2', '\x129', '\x12B', '\x5', '\x38', '\x1D', '\x6', '\x12A', '\x118', 
		'\x3', '\x2', '\x2', '\x2', '\x12A', '\x11B', '\x3', '\x2', '\x2', '\x2', 
		'\x12A', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x121', '\x3', 
		'\x2', '\x2', '\x2', '\x12A', '\x124', '\x3', '\x2', '\x2', '\x2', '\x12A', 
		'\x127', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x12E', '\x3', '\x2', '\x2', 
		'\x2', '\x12C', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x12D', 
		'\x3', '\x2', '\x2', '\x2', '\x12D', '\x39', '\x3', '\x2', '\x2', '\x2', 
		'\x12E', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x130', '\x5', 
		'\x44', '#', '\x2', '\x130', '\x131', '\a', ')', '\x2', '\x2', '\x131', 
		'\x132', '\x5', '<', '\x1F', '\x2', '\x132', '\x133', '\a', '*', '\x2', 
		'\x2', '\x133', ';', '\x3', '\x2', '\x2', '\x2', '\x134', '\x139', '\x5', 
		'\x38', '\x1D', '\x2', '\x135', '\x136', '\a', '\"', '\x2', '\x2', '\x136', 
		'\x138', '\x5', '\x38', '\x1D', '\x2', '\x137', '\x135', '\x3', '\x2', 
		'\x2', '\x2', '\x138', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x139', '\x137', 
		'\x3', '\x2', '\x2', '\x2', '\x139', '\x13A', '\x3', '\x2', '\x2', '\x2', 
		'\x13A', '=', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x139', '\x3', '\x2', 
		'\x2', '\x2', '\x13C', '\x141', '\a', '\x3', '\x2', '\x2', '\x13D', '\x13E', 
		'\a', ')', '\x2', '\x2', '\x13E', '\x13F', '\x5', '<', '\x1F', '\x2', 
		'\x13F', '\x140', '\a', '*', '\x2', '\x2', '\x140', '\x142', '\x3', '\x2', 
		'\x2', '\x2', '\x141', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x141', '\x142', 
		'\x3', '\x2', '\x2', '\x2', '\x142', '?', '\x3', '\x2', '\x2', '\x2', 
		'\x143', '\x144', '\a', '\'', '\x2', '\x2', '\x144', '\x145', '\x5', '\x42', 
		'\"', '\x2', '\x145', '\x146', '\a', '(', '\x2', '\x2', '\x146', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x147', '\x14C', '\x5', '\x38', '\x1D', '\x2', 
		'\x148', '\x149', '\a', '\"', '\x2', '\x2', '\x149', '\x14B', '\x5', '\x38', 
		'\x1D', '\x2', '\x14A', '\x148', '\x3', '\x2', '\x2', '\x2', '\x14B', 
		'\x14E', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x14A', '\x3', '\x2', '\x2', 
		'\x2', '\x14C', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x14E', '\x14C', '\x3', '\x2', '\x2', '\x2', 
		'\x14F', '\x150', '\a', '\x1E', '\x2', '\x2', '\x150', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\x151', '\x152', '\a', '\x1F', '\x2', '\x2', '\x152', 
		'G', '\x3', '\x2', '\x2', '\x2', ' ', 'K', 'R', 'X', '\\', 'h', 'r', 'z', 
		'\x83', '\x8E', '\x94', '\xA6', '\xB5', '\xC3', '\xC5', '\xCC', '\xD6', 
		'\xDA', '\xE8', '\xF3', '\xF7', '\x101', '\x108', '\x10A', '\x113', '\x116', 
		'\x12A', '\x12C', '\x139', '\x141', '\x14C',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
